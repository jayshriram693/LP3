 import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_squared_error
# Load the dataset (You should replace 'uber_data.csv' with your dataset)
data = pd.read_csv('uber_data.csv')
# 1. Pre-process the dataset
# Assuming your dataset has columns like 'pickup_location', 'dropoff_location', 'distance', a# You may need to convert location data into numerical values and handle missing values
# Example pre-processing (convert locations to numerical):
data['pickup_location'] = pd.Categorical(data['pickup_location']).codes
data['dropoff_location'] = pd.Categorical(data['dropoff_location']).codes
# Split the dataset into features and target
X = data[['pickup_location', 'dropoff_location', 'distance']]
y = data['price']
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# 2. Implement linear regression and random forest regression models
# Linear Regression
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
lr_predictions = lr_model.predict(X_test)
# Random Forest Regression
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
rf_predictions = rf_model.predict(X_test)
# 3. Evaluate the models
# Calculate R-squared and Root Mean Squared Error (RMSE)
lr_r2 = r2_score(y_test, lr_predictions)
lr_rmse = np.sqrt(mean_squared_error(y_test, lr_predictions))
rf_r2 = r2_score(y_test, rf_predictions)
rf_rmse = np.sqrt(mean_squared_error(y_test, rf_predictions))
# Compare the model scores
print("Linear Regression R-squared:", lr_r2)
print("Linear Regression RMSE:", lr_rmse)
print("Random Forest Regression R-squared:", rf_r2)
print("Random Forest Regression RMSE:", rf_rmse)
